install.packages('gplots')
car_sales <- file.choose()
car_sales <- read.csv(file.choose())
table(car_sales$owner, car_sales$fuel)
dt <- as.table(as.matrix(car_sales))
dt
dt
car_sales <- read.csv(file.choose())
car_sales_tab <- table(car_sales$owner, car_sales$fuel)
dt <- as.table(as.matrix(car_sales_tab))
dt
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
library(gplots)
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
View(car_sales)
car_sales_tab1 <- table(car_sales$owner, car_sales$fuel)
car_sales_tab2 <- table(car_sales$owner, car_sales$transmission)
dt2 <- as.table(as.matrix(car_sales_tab))
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt2), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
car_sales_tab2 <- table(car_sales$owner, car_sales$transmission)
dt2 <- as.table(as.matrix(car_sales_tab2))
car_sales_tab2 <- table(car_sales$owner, car_sales$transmission)
dt2 <- as.table(as.matrix(car_sales_tab2))
balloonplot(t(dt2), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
car_sales_tab3 <- table(car_sales$owner, car_sales$car_type)
dt3 <- as.table(as.matrix(car_sales_tab3))
balloonplot(t(dt3), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt1), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
car_sales_tab1 <- table(car_sales$owner, car_sales$fuel)
dt1 <- as.table(as.matrix(car_sales_tab))
car_sales_tab2 <- table(car_sales$owner, car_sales$transmission)
dt2 <- as.table(as.matrix(car_sales_tab2))
car_sales_tab3 <- table(car_sales$owner, car_sales$car_type)
dt3 <- as.table(as.matrix(car_sales_tab3))
dt1 <- as.table(as.matrix(car_sales_tab1))
car_sales_tab1 <- table(car_sales$owner, car_sales$fuel)
dt1 <- as.table(as.matrix(car_sales_tab1))
car_sales_tab2 <- table(car_sales$owner, car_sales$transmission)
dt2 <- as.table(as.matrix(car_sales_tab2))
car_sales_tab3 <- table(car_sales$owner, car_sales$car_type)
dt3 <- as.table(as.matrix(car_sales_tab3))
balloonplot(t(dt1), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt2), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
balloonplot(t(dt3), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
winequality <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep = ";")
View(winequality)
?balloonplot
car_sales_tab
car_sales_tab
# Chi Square test to verify the association between the variables Owner Type & Fuel
chisq_test <- chisq.test(car_sales_tab)
chisq_test
#format(chisq_test$p.value, scientific = FALSE)
# Chi Square test to verify the association between the variables Owner Type & Fuel
chisq_test <- chisq.test(car_sales_tab)
chisq_test
format(chisq_test$p.value, scientific = FALSE)
chisq.test(car_sales_tab1)
cs <- chisq.test(car_sales_tab1)
cs$statistic
cs$parameter
cs$p.value
names(car_sales)
one.way <- aov(selling_price ~ fuel, data = car_sales)
one.way
summary(one.way)
one.way <- aov(selling_price ~ km_driven, data = car_sales)
summary(one.way)
one.way <- aov(selling_price ~ fuel, data = car_sales)
summary(one.way)
one.way <- aov(selling_price ~ km_driven, data = car_sales)
summary(one.way)
one.way <- aov(selling_price ~ fuel, data = car_sales)
summary(one.way)
names(car_sales)
one.way1 <- aov(max_power ~ fuel, data = car_sales)
summary(one.way1)
one.way2 <- aov(max_power ~ fuel, data = car_sales)
summary(one.way2)
one.way1 <- aov(max_power ~ fuel, data = car_sales)
one.way1 <- aov(max_power ~ fuel, data = car_sales)
summary(one.way1)
one.way2 <- aov(engine ~ fuel, data = car_sales)
summary(one.way2)
one.way3 <- aov(mileage ~ fuel, data = car_sales)
summary(one.way3)
one.way4 <- aov(km_driven ~ fuel, data = car_sales)
summary(one.way4)
one.way5 <- aov(max_power ~ owner, data = car_sales)
summary(one.way5)
one.way6 <- aov(engine ~ owner, data = car_sales)
summary(one.way6)
one.way7 <- aov(mileage ~ owner, data = car_sales)
summary(one.way7)
one.way8 <- aov(km_driven ~ owner, data = car_sales)
summary(one.way8)
summary(one.way6)[1]
summary(one.way6)[1]
a <- summary(one.way6)
a$p.value
one.way6$coefficients
one.way6
one.way6 <- aov(engine ~ owner, data = car_sales)
summary(one.way6)
one.way6 <- aov(engine ~ owner + fuel, data = car_sales)
summary(one.way6)
one.way6 <- aov(engine ~ owner * fuel, data = car_sales)
summary(one.way6)
lm(selling_price ~ fuel, data = car_sales)
lm(selling_price ~ fuel  + owner, data = car_sales)
lm(selling_price ~ km_driven + fuel  + owner, data = car_sales)
a <- lm(selling_price ~ km_driven + fuel  + owner, data = car_sales)
summary(a)
View(car_sales)
ncol(car_sales)
View(car_sales)
car_sales_df <- car_sales[, c(3:ncol(car_sales))]
View(car_sales_df)
View(car_sales_df)
ncol(car_sales_df)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
install.packages("caret")
library(caret)
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:14),
trControl = train.control
)
library(caret)
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:14),
trControl = train.control
)
library(leaps)
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:14),
trControl = train.control
)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:14),
trControl = train.control
)
step.model$results
step.model$bestTune
View(car_sales)
names(car_sales)
summary(step.model$finalModel)
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:14),
trControl = train.control
)
step.model$results
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = train.control
)
data.frame(nvmax = 1:10)
step.model$results
step.model$bestTune
summary(step.model$finalModel)
names(leapForward)
names(car_sales_df)
car_sales_df <- car_sales[, c("selling_price", "km_driven", "fuel", "seller_type", "transmission", "owner",
"mileage", "engine", "max_power", "seats", "torque", "rpm", "car_type", "age")]
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(selling_price ~., data = car_sales_df,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = train.control
)
step.model$results
summary(lm(selling_price ~ brand, data = car_sales))
a <- summary(lm(selling_price ~ brand, data = car_sales))
a$adj.r.squared
a[adj.r.squared]
a['adj.r.squared']
a[['adj.r.squared']]
summary(lm(selling_price ~ brand, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ brand, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ brand, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ km_driven, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ km_driven, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ fuel, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ seller_type, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ transmission, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ owner, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ mileage, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ engine, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ max_power, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ seats, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ torque, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ rpm, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ car_type, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ age, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ brand, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ brand, data = car_sales))[['r.squared']]
summary(lm(selling_price ~ brand + age, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ brand + age, data = car_sales))[['r.squared']]
summary(lm(selling_price ~ brand + age + car_type, data = car_sales))[['adj.r.squared']]
summary(lm(selling_price ~ brand + age + car_type, data = car_sales))[['r.squared']]
hist(car_sales$selling_price)
hist(log(car_sales$selling_price))
summary(lm(log(selling_price) ~ brand + age + car_type, data = car_sales))[['r.squared']]
# Train the model
step.model <- train(log(selling_price) ~., data = car_sales_df,
method = "leapForward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = train.control
)
step.model$results
step.model$bestTune
summary(step.model$finalModel)
View(swiss)
library(MASS)
# Fit the full model
full.model <- lm(log(selling_price) ~., data = car_sales_df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
View(car_sales_df)
summary(lm(log(selling_price) ~ km_driven, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ fuel, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ seller_type, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ transmission, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ owner, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ mileage, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ engine, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ max_power, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ seats, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ torque, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ rpm, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ car_type, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ age, data = car_sales))[['r.squared']]
summary(lm(log(selling_price) ~ brand, data = car_sales))[['adj.r.squared']]
names_vec <- c('fuel', 'seller_type', 'transmission', 'owner', 'engine', 'max_power', 'torque', 'age', 'brand')
#c("selling_price", "km_driven", "fuel", "seller_type", "transmission", "owner", "mileage", "engine", "max_power", "seats", "torque", "rpm", "car_type", "age")
names_vec <- c('fuel', 'seller_type', 'transmission', 'owner', 'engine', 'max_power', 'torque', 'age', 'brand')
car_sales_df <- car_sales[, names_vec]
View(car_sales_df)
#c("selling_price", "km_driven", "fuel", "seller_type", "transmission", "owner", "mileage", "engine", "max_power", "seats", "torque", "rpm", "car_type", "age")
names_vec <- c('selling_price', 'fuel', 'seller_type', 'transmission', 'owner', 'engine', 'max_power', 'torque', 'age', 'brand')
car_sales_df <- car_sales[, names_vec]
# Fit the full model
full.model <- lm(log(selling_price) ~., data = car_sales_df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
full.model <- lm(log(selling_price) ~ factor(fuel, exclude = c('Diesel')) + factor(seller_type, exclude = c('Dealer', 'Trustmark Dealer')) +
factor(transmission, exclude = c('Automatic')) + factor(owner, exclude = c('First Owner')) +
engine + max_power + age + brand,
data = car_sales_df)
full.model <- lm(log(selling_price) ~ factor(fuel) + factor(seller_type, exclude = c('Dealer', 'Trustmark Dealer')) +
factor(transmission, exclude = c('Automatic')) + factor(owner, exclude = c('First Owner')) +
engine + max_power + age + brand,
data = car_sales_df)
full.model <- lm(log(selling_price) ~ factor(fuel) + factor(seller_type) +
factor(transmission, exclude = c('Automatic')) + factor(owner, exclude = c('First Owner')) +
engine + max_power + age + brand,
data = car_sales_df)
full.model <- lm(log(selling_price) ~ factor(fuel) + factor(seller_type) +
factor(transmission) + factor(owner, exclude = c('First Owner')) +
engine + max_power + age + brand,
data = car_sales_df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
# Fit the full model
full.model <- lm(log(selling_price) ~., data = car_sales_df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
names(car_sales_df)
full.model <- lm(log(selling_price) ~ fuel + seller_type + transmission + owner + engine + max_power +
factor(brand, exclude = c('Ashok Leyland', 'Audi')),
data = car_sales_df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
# Fit the full model
full.model <- lm(log(selling_price) ~., data = car_sales_df)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
?ggdensity
plot(step.model)
library(ggpubr)
?ggdensity
ggdensity(car_sales, x = selling_price,  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Female Cats Bodyweight') +
labs(title = 'Density plot of Female Cats Bodyweight')
ggdensity(car_sales, x = car_sales$selling_price,  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Female Cats Bodyweight') +
labs(title = 'Density plot of Female Cats Bodyweight')
ggdensity(car_sales$selling_price,  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Female Cats Bodyweight') +
labs(title = 'Density plot of Female Cats Bodyweight')
ggdensity(log(car_sales$selling_price),  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Selling Price') +
labs(title = 'Density plot of Selling Price')
ggdensity(log(car_sales$selling_price, base = 10),  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Selling Price') +
labs(title = 'Density plot of Selling Price')
ggdensity(log(car_sales$selling_price)-1,  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Selling Price') +
labs(title = 'Density plot of Selling Price')
p1 <- ggplot(data = car_sales) +
geom_histogram(mapping = aes(selling_price))
p2 <- ggdensity(car_sales$selling_price,  fill = 'lightgray') +
stat_overlay_normal_density(color = 'red', linetype = 'dashed') +
xlab(label = 'Selling Price') +
labs(title = 'Density plot of Selling Price')
gridExtra::grid.arrange(p1, p2)
car_sales$log_selling_price <- log(car_sales$selling_price)
View(car_sales)
car_sales <- read.csv(file.choose())
View(head(car_sales))
car_sales_old <- read.csv(file.choose())
View(head(car_sales_old))
